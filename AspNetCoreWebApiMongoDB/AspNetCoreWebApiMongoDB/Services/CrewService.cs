using AspNetCoreWebApiMongoDB.Models;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace AspNetCoreWebApiMongoDB.Services
{
    public class CrewService
    {
        private readonly IMongoCollection<Crew> _crews;
        private readonly ProjectionDefinition<Crew> _projection;

        public CrewService(MongoConnectionString connString)
        {
            var client = new MongoClient(connString.ConnectionString);
            var db = client.GetDatabase(connString.DatabaseName);


            // to select only part of the fields we have to define projection,
            // without it we get an exception
            // id by default is included
            this._projection = Builders<Crew>.Projection
                .Include(c => c.CrewName)
                .Include(c => c.Skills);

            this._crews = db.GetCollection<Crew>("crew");
        }

        public List<Crew> GetCrews()
        {
            // just an example how to read only subset of fields:
            var tmpList = this._crews.Find(Builders<Crew>.Filter.Empty).Project(this._projection).ToList();
            foreach(var item in tmpList)
            {
               Debug.WriteLine(item.GetValue("name"));
            }

            return this._crews.Find(Builders<Crew>.Filter.Empty).ToList();
        }

        public Crew GetCrew(string id)
        {
            return this._crews.Find(c => c.Id == id).FirstOrDefault();
        }

        public Crew CreateCrew(Crew c)
        {
            this._crews.InsertOne(c);
            // after executing InsertOne Id is set on a new value generated by MongoDB
            return c;
        }

        public void Update(string id, Crew c)
        {
            // Set ID on the value equal to the ID of the document that we want to replace.
            // More here: https://chsakell.gitbook.io/mongodb-csharp-docs/crud-basics/update-documents/replace
            c.Id = id;

            // https://www.mongodb.com/community/forums/t/facing-this-weird-issue-in-asp-net-core-3-0/5057/2
            this._crews.ReplaceOne(c => c.Id == id, c);
        }

        public void Delete(string id)
        {
            // DeleteOne does not throw exception in case the object has not be found
            var results = this._crews.DeleteOne(c => c.Id == id);
            if (results.DeletedCount == 1)
            {
                Debug.WriteLine($"Delete object with id {id}");
            }
        }
    }
}
